#!/usr/bin/python3
#
# Discrete Fourier transform through FFT algorithm
#
# Author: Greyson Mitra
# Date: 2021-05-27
#

import numpy as np

class DFT_modulator:

    def __init__(self, subcarrierCount):
        self.subcarrierCount = subcarrierCount
        

    # complexArr will be a 1D complex array.   
    def dft_demod(self, complexArr):
        untrans = np.zeros((complexArr.size,), dtype=complex) 
        for i in range(complexArr.size):
            untrans[-120+i] = complexArr[i] # Rearrange QPSK symbols so that the first symbol goes to subcarrier -120 and last goes to 119

        transformed = np.fft.ifft(untrans)
        
        #transformed = np.fft.ifft(complexArr)

        #print('transformed: %r'%transformed)

        
        out = np.zeros((self.subcarrierCount,), dtype=complex) # Array of length 256 to fit in 240 filled subcarriers and 16 empty ones to avoid interference

        for i in range(transformed.size):
            out[i+8] = transformed[i]




        # Start with first input at -120 and last at 119
        #for i in range(transformed.size):
            #print('i: %r'%i)
            #out[-120+i] = transformed[i]

        print('IDFT bits: %r'%out)

        return out
            
